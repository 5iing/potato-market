name: Test_GitHub_Actions

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test-and-coverage:
    name: Unit Test & Code Coverage
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Flutter SDK 설치
        uses: subosito/flutter-action@v2.12.0
        with:
          channel: stable
          cache: true

      - name: Flutter 버전 확인
        run: flutter --version

      - name: 의존성 패키지 설치
        run: flutter pub get

      # - name: 코드 분석 (Lint)
      #   run: flutter analyze

      - name: 단위 테스트 실행 (커버리지 포함)
        run: flutter test --coverage

      - name: lcov 설치
        run: sudo apt-get install -y lcov

      - name: 커버리지 필터링 및 상세 리포트 출력
        run: |
          echo ""
          echo "커버리지 분석 중..."
          echo ""

          # 생성된 파일 제외
          lcov --remove coverage/lcov.info \
            '**/*.g.dart' \
            '**/*.freezed.dart' \
            '**/*.mocks.dart' \
            '**/generated_plugin_registrant.dart' \
            -o coverage/lcov_filtered.info

          echo "전체 커버리지 요약"
          echo "========================================="
          lcov --list coverage/lcov_filtered.info
          echo ""

          # 전체 커버리지 퍼센트 계산
          COVERAGE=$(lcov --summary coverage/lcov_filtered.info 2>&1 | grep "lines" | awk '{print $2}' | sed 's/%//')

          MIN_COVERAGE=80

          echo ""
          echo "========================================="
          echo "최종 커버리지 결과"
          echo "========================================="
          echo "현재 커버리지: $COVERAGE%"
          echo "최소 요구 기준: ${MIN_COVERAGE}%"
          echo "========================================="
          echo ""


          if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
            echo "테스트 실패: 커버리지가 최소 기준($MIN_COVERAGE%)에 미달합니다."
            echo "   현재: $COVERAGE% | 필요: $MIN_COVERAGE%"
            echo ""
            exit 1
          else
            echo "테스트 통과: 커버리지가 요구 기준을 충족합니다!"
            echo "   현재: $COVERAGE% | 필요: $MIN_COVERAGE%"
            echo ""
            exit 0
          fi

  build-and-push-ghcr:
    name: Build & Push Docker to GHCR
    runs-on: ubuntu-latest
    needs: test-and-coverage

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 로그인(GHCR) - GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Flutter SDK 설치
        uses: subosito/flutter-action@v2.12.0
        with:
          channel: stable
          cache: true

      - name: 의존성 패키지 설치
        run: flutter pub get

      - name: Release APK 빌드
        run: flutter build apk --release

      - name: Dockerfile 생성
        run: |
          cat <<EOF > Dockerfile
          FROM debian:bullseye-slim
          COPY build/app/outputs/flutter-apk/app-release.apk /app/app-release.apk
          EOF

      - name: 버전 태그 결정
        id: version
        run: echo "TAG=$(date +%Y%m%d)-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Docker build & push to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}/flutter-apk:${{ steps.version.outputs.TAG }}

      - name: 이미지 푸시 성공 확인
        run: |
          echo "GHCR 업로드 완료: ghcr.io/${{ github.repository }}/flutter-apk:${{ steps.version.outputs.TAG }}"
